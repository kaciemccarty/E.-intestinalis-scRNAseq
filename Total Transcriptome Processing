#Load necessary libraries
library(Seurat)
library(tidyverse)
library(RColorBrewer)
library(cowplot)

#Import and prepare the first dataset
raw.data <- Read10X(data.dir="/YOUR DATA")
raw.gene.count <- raw.data$`Gene Expression`  #38,612 features, 10,100 cells
raw.HTO.count <- raw.data$`Antibody Capture`  #4 features, 10,100 cells
joint.bcs <- intersect(colnames(raw.gene.count), colnames(raw.HTO.count))
raw.gene.count <- raw.gene.count[,joint.bcs] 
raw.HTO.count <- as.matrix(raw.HTO.count[,joint.bcs])
row.names(raw.HTO.count) <- c('ctrl','1dpi','2dpi','3dpi')
gene.hashtag <- CreateSeuratObject(counts = raw.gene.count)
gene.hashtag <- NormalizeData(gene.hashtag, normalization.method = "LogNormalize", scale.factor = 10000)
gene.hashtag <- FindVariableFeatures(gene.hashtag, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(gene.hashtag)
gene.hashtag <- ScaleData(gene.hashtag, features = all.genes)
raw.HTO.count <- NormalizeData(raw.HTO.count, normalization.method = "CLR")
gene.hashtag[["HTO"]] <- CreateAssayObject(counts=raw.HTO.count)
gene.hashtag <- MULTIseqDemux(gene.hashtag, assay = "HTO")
table(gene.hashtag$MULTI_ID)
#1dpi     2dpi     3dpi     ctrl  Doublet Negative 
#1559     1631     2136     2870      878     1026 
gene.singlet <- subset(gene.hashtag, idents = c("ctrl","1dpi","2dpi","3dpi"))
dim(gene.singlet) #8,196 cells
percent.mt <- PercentageFeatureSet(gene.singlet, pattern = "^MT-")
gene.singlet <- AddMetaData(gene.singlet, metadata = percent.mt, col.name = "percent.mt")
percent.microsporidia <- PercentageFeatureSet(gene.singlet, pattern = "^Eint-")
gene.singlet <- AddMetaData(gene.singlet, metadata = percent.microsporidia, col.name = "percent.microsporidia")
Donor1 <- subset(gene.singlet, subset = nFeature_RNA > 500 & nFeature_RNA <6000 & nCount_RNA > 2000 & nCount_RNA < 40000 & percent.mt <20)
dim(Donor1)
#8,097 cells remain

remove(raw.data)
remove(gene.hashtag)
remove(gene.singlet)
remove(percent.mt)
remove(raw.gene.count)
remove(raw.HTO.count)
remove(joint.bcs)
remove(all.genes)
remove(percent.microsporidia)

#Import second donor
raw.data <- Read10X(data.dir = "/YOUR DATA")
raw.gene.count <- raw.data$`Gene Expression`  #38,612 features and 12,279 cells
raw.HTO.count <- raw.data$`Antibody Capture`  #4 features and 12,279 cells
joint.bcs <- intersect(colnames(raw.gene.count), colnames(raw.HTO.count))
raw.gene.count <- raw.gene.count[,joint.bcs]
raw.HTO.count <- as.matrix(raw.HTO.count[,joint.bcs])
row.names(raw.HTO.count) <- c("ctrl","3hpi","12hpi","1dpi")
gene.hashtag <- CreateSeuratObject(counts = raw.gene.count)
gene.hashtag <- NormalizeData(gene.hashtag, normalization.method = "LogNormalize", scale.factor = 10000)
gene.hashtag <- FindVariableFeatures(gene.hashtag, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(gene.hashtag)
gene.hashtag <- ScaleData(gene.hashtag, features = all.genes)
raw.HTO.count <- NormalizeData(raw.HTO.count, normalization.method = "CLR")
gene.hashtag[["HTO"]] <- CreateAssayObject(counts = raw.HTO.count)
gene.hashtag <- MULTIseqDemux(gene.hashtag, assay = "HTO")
table(gene.hashtag$MULTI_ID)
#12hpi     1dpi     3hpi     ctrl  Doublet Negative 
#3483     3219     3434      415      628     1100
gene.singlet <- subset(gene.hashtag, idents = c("ctrl","3hpi","12hpi","1dpi"))
percent.mt <- PercentageFeatureSet(gene.singlet, pattern = "^MT-")
gene.singlet <- AddMetaData(gene.singlet, metadata = percent.mt, col.name = "percent.mt")
percent.microsporidia <- PercentageFeatureSet(gene.singlet, pattern = "^Eint-")
gene.singlet <- AddMetaData(gene.singlet, metadata = percent.microsporidia, col.name = "percent.microsporidia")
Donor2 <- subset(gene.singlet, subset = nFeature_RNA > 500 & nFeature_RNA <6000 & nCount_RNA > 2200 & nCount_RNA < 35000 & percent.mt <20)
dim(Donor2)
#10,062 cells remain 

remove(raw.data)
remove(gene.hashtag)
remove(gene.singlet)
remove(percent.mt)
remove(raw.gene.count)
remove(raw.HTO.count)
remove(joint.bcs)
remove(all.genes)
remove(percent.microsporidia)

#Import third and fourth donor
raw.data <- Read10X(data.dir="/YOUR DATA")
raw.gene.count <- raw.data$`Gene Expression`  #38,612 features and 30,355 cells
raw.HTO.count <- raw.data$`Antibody Capture`  #6 features and 30,355 cells
joint.bcs <- intersect(colnames(raw.gene.count), colnames(raw.HTO.count))
raw.gene.count <- raw.gene.count[,joint.bcs]
raw.HTO.count <- as.matrix(raw.HTO.count[,joint.bcs])
rownames(raw.HTO.count) <- c("D3_ctrl","D3_1dpi","D3_2dpi","D4_ctrl","D4_1dpi","D4_2dpi")
gene.hashtag <- CreateSeuratObject(counts = raw.gene.count)
gene.hashtag <- NormalizeData(gene.hashtag, normalization.method = "LogNormalize", scale.factor = 10000)
gene.hashtag <- FindVariableFeatures(gene.hashtag, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(gene.hashtag)
gene.hashtag <- ScaleData(gene.hashtag, features = all.genes)
raw.HTO.count <- NormalizeData(raw.HTO.count, normalization.method = "CLR")
gene.hashtag[["HTO"]] <- CreateAssayObject(counts = raw.HTO.count)
gene.hashtag <- MULTIseqDemux(gene.hashtag, assay = "HTO")
table(gene.hashtag$MULTI_ID)
#D3-1dpi  D3-2dpi  D3-ctrl  D4-1dpi  D4-2dpi  D4-ctrl  Doublet Negative 
#3500     5984      830     5583     4431     1572     6535     1920
percent.mt <- PercentageFeatureSet(gene.hashtag, pattern = "^MT-")
gene.hashtag <- AddMetaData(gene.hashtag, metadata = percent.mt, col.name = "percent.mt")
percent.microsporidia <- PercentageFeatureSet(gene.hashtag, pattern = "^Eint-")
gene.hashtag <- AddMetaData(gene.hashtag, metadata = percent.microsporidia, col.name = "percent.microsporidia")
gene.singlet3 <- subset(gene.hashtag, idents = c("D3-ctrl","D3-1dpi","D3-2dpi"))
gene.singlet4 <- subset(gene.hashtag, idents = c("D4-ctrl","D4-1dpi","D4-2dpi"))
Donor3 <- subset(gene.singlet3, subset =  nFeature_RNA > 400 & nFeature_RNA < 4000 & nCount_RNA > 1000 & nCount_RNA < 20000 & percent.mt <20)
dim(Donor3) 
#10,254 cells remain
Donor4 <- subset(gene.singlet4, subset =  nFeature_RNA > 400 & nFeature_RNA <3800 & nCount_RNA > 1000 & nCount_RNA < 15000 & percent.mt <20)
dim(Donor4)
#11,468 cells remain

remove(raw.data)
remove(gene.hashtag)
remove(gene.singlet3)
remove(gene.singlet4)
remove(percent.mt)
remove(raw.gene.count)
remove(raw.HTO.count)
remove(joint.bcs)
remove(all.genes)
remove(percent.microsporidia)

Donor1$Exp <- "Donor1"
Donor2$Exp <- "Donor2"
Donor3$Exp <- "Donor3"
Donor4$Exp <- "Donor4"

#Next, we are going to perform integration and batch correction
#First, select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = list(Donor1, Donor2, Donor3, Donor4), nfeatures = 3000)
options(max.print = 100000)
features

#We then identify anchors using the FindIntegrationAnchors() function, which will take a list of Seurat objects as input, and use these anchors to integrate the four datasets together with IntegrateData().
combined.anchors <- FindIntegrationAnchors(object.list = list(Donor1, Donor2, Donor3, Donor4), anchor.features = features)

remove(Donor1)
remove(Donor2)
remove(Donor3)
remove(Donor4)

#Merging 4 datasets
combined.dataset <- IntegrateData(anchorset = combined.anchors)
dim(combined.dataset)
#3,000 features, 39,881 cells

#Next, let's see the integration results
DefaultAssay(combined.dataset) <- "integrated"
combined.dataset <- ScaleData(combined.dataset, verbose = FALSE)
combined.dataset <- RunPCA(combined.dataset)
percent.pc <- combined.dataset@reductions$pca@stdev / sum(combined.dataset@reductions$pca@stdev) * 100
cum.percent.pc <- cumsum(percent.pc)
cum.percent.pc
#[1]  21.96502  26.90431  31.45381  34.76272  38.01465  40.94041  43.64577  46.26728  48.33232  50.32710  52.16523
#[12]  53.87988  55.55547  57.17248  58.70376  60.21769  61.71437  63.17951  64.62870  66.03014  67.37471  68.69862
#[23]  69.97698  71.22500  72.45574  73.67421  74.88090  76.05985  77.22107  78.37429  79.51928  80.65682  81.78651
#[34]  82.90236  84.01715  85.12363  86.21831  87.30997  88.39688  89.47771  90.54750  91.61526  92.67512  93.73334
#[45]  94.78968  95.84098  96.88502  97.92733  98.96453 100.00000
#PC1-PC41

#Run UMAP
combined.dataset <- RunUMAP(combined.dataset, dims = 1:41)
Idents(combined.dataset) <- "Exp"

DimPlot(combined.dataset, reduction = "umap", pt.size = 0.1, cols = "Set1")
DimPlot(combined.dataset, reduction = "umap", pt.size = 0.1, split.by = "Exp", ncol = 2, cols = "Set1")
combined.dataset$MULTI_ID <- recode_factor(combined.dataset$MULTI_ID, "D3-ctrl"  = "ctrl", "D3-1dpi" = "1dpi", "D3-2dpi" = "2dpi", "D4-ctrl"  = "ctrl", "D4-1dpi" = "1dpi", "D4-2dpi" = "2dpi")
combined.dataset$MULTI_ID <- factor(combined.dataset$MULTI_ID, levels = c("ctrl","3hpi","12hpi","1dpi","2dpi","3dpi"))
DimPlot(combined.dataset, split.by = "MULTI_ID", cols = "Set1", pt.size = 0.1) + facet_wrap(~combined.dataset$MULTI_ID + combined.dataset$Exp)
DimPlot(combined.dataset, reduction = "umap", split.by = "MULTI_ID", ncol = 3, label = T, pt.size = 0.1) 

#Find number of cells in each timepoints
no.cells.timepoints <- table(combined.dataset@meta.data$MULTI_ID, combined.dataset@meta.data$orig.ident, combined.dataset@meta.data$Exp)

#Perform the clustering
set.seed(2022)
Idents(combined.dataset) <- "orig.ident"
combined.dataset <- FindNeighbors(combined.dataset, dims = 1:41)

#Resolution 0.4
combined.dataset <- FindClusters(combined.dataset, resolution = 0.4)
png("PJSC22_UMAP_res0.4.png", width = 12, height = 10, units = "cm", res = 300)
DimPlot(combined.dataset, pt.size = 0.1, label = T, label.size = 4)
dev.off()
#12 clusters

DimPlot(combined.dataset, reduction = "umap", split.by = "Exp", ncol = 2, label = F, pt.size = 0.1)
DimPlot(combined.dataset, reduction = "umap", split.by = "MULTI_ID", ncol = 2, label = F, pt.size = 0.1)
DimPlot(combined.dataset, split.by = "MULTI_ID", pt.size = 0.1) + facet_wrap(~combined.dataset$MULTI_ID + combined.dataset$Exp, ncol = 4, label = T)
FeaturePlot(combined.dataset, features = "percent.microsporidia", label = T)

#Quantification of infected cells
combined.dataset <- FindClusters(combined.dataset, resolution = 0.4)
cells_with_microsporidia_2 <- subset(combined.dataset, subset = percent.microsporidia > 2)
infected_cell_barcodes_2 <- colnames(cells_with_microsporidia_2)
infected_cell_barcodes_2 <- data.frame(infected_cell_barcodes_2)
dim(infected_cell_barcodes_2) #7056 cells
combined.dataset$infected_cell_2 <- ifelse(rownames(combined.dataset@meta.data) %in% infected_cell_barcodes_2$infected_cell_barcodes_2, "Yes", "No" )

#Save infected cell barcodes
Total_Infected_cell_Barcodes <- combined.dataset@meta.data[,c(9,10,13,14)]
write.csv(Total_Infected_cell_Barcodes, "Total_Infected_cell_Barcodes.csv")

Idents(combined.dataset) <- "infected_cell_2"
DimPlot(combined.dataset, split.by = "Exp", ncol = 2, pt.size = 0.1, cols = c("gray","mediumblue"))
#Quantify Infected Cells
combined.dataset@meta.data %>% group_by(integrated_snn_res.0.4, infected_cell_2) %>% count() %>% group_by(integrated_snn_res.0.4) %>% mutate(percent=100*n/sum(n)) %>% ungroup() %>% ggplot(aes(x=integrated_snn_res.0.4, y=percent, fill = infected_cell_2)) + geom_col() + ylab("Percent") + xlab("Clusters") + theme(text = element_text(size = 17, face = "plain")) + scale_fill_brewer(palette = "Greys")

#Find top genes in each cluster 
DefaultAssay(combined.dataset) <- "RNA"
RNA_allmarkers <- FindAllMarkers(combined.dataset, min.pct = 0.25)
RNA_allmarkers.top5 <- RNA_allmarkers %>% group_by(cluster) %>% top_n(5, avg_log2FC)




